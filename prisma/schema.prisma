// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String?
  lastname       String?
  username       String   @unique
  email          String   @unique
  profilePicture String?
  birthDate      DateTime?
  password       String
  userType       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  token          Token[]
  Post           Post[]
  Like           Like[]
}

model Token {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String @db.VarChar(255)
  type   String

  // Define a unique index on userId and token
  @@unique([userId, token, type], name: "userId_token_unique")
}

model Post {
  id         Int      @id @default(autoincrement())
  body       String?
  image      String?
  video      String?
  createdBy  Int
  user       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parentPost Int? // Allow null for top-level posts
  parent     Post?    @relation("PostToParent", fields: [parentPost], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Post_parent_fkey")
  children   Post[]   @relation("PostToParent")
  Like       Like[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        Int  @id @default(autoincrement())
  userId    Int
  postId    Int
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
